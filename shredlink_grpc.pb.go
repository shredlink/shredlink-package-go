// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: shredlink.proto

package shredlink_package_go_git

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShredlinkService_SubscribeEntries_FullMethodName      = "/shredlink.ShredlinkService/SubscribeEntries"
	ShredlinkService_SubscribeTransactions_FullMethodName = "/shredlink.ShredlinkService/SubscribeTransactions"
)

// ShredlinkServiceClient is the client API for ShredlinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShredlinkServiceClient interface {
	SubscribeEntries(ctx context.Context, in *SubscribeEntriesRequest, opts ...grpc.CallOption) (ShredlinkService_SubscribeEntriesClient, error)
	SubscribeTransactions(ctx context.Context, opts ...grpc.CallOption) (ShredlinkService_SubscribeTransactionsClient, error)
}

type shredlinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShredlinkServiceClient(cc grpc.ClientConnInterface) ShredlinkServiceClient {
	return &shredlinkServiceClient{cc}
}

func (c *shredlinkServiceClient) SubscribeEntries(ctx context.Context, in *SubscribeEntriesRequest, opts ...grpc.CallOption) (ShredlinkService_SubscribeEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShredlinkService_ServiceDesc.Streams[0], ShredlinkService_SubscribeEntries_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &shredlinkServiceSubscribeEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShredlinkService_SubscribeEntriesClient interface {
	Recv() (*Entry, error)
	grpc.ClientStream
}

type shredlinkServiceSubscribeEntriesClient struct {
	grpc.ClientStream
}

func (x *shredlinkServiceSubscribeEntriesClient) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shredlinkServiceClient) SubscribeTransactions(ctx context.Context, opts ...grpc.CallOption) (ShredlinkService_SubscribeTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShredlinkService_ServiceDesc.Streams[1], ShredlinkService_SubscribeTransactions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &shredlinkServiceSubscribeTransactionsClient{stream}
	return x, nil
}

type ShredlinkService_SubscribeTransactionsClient interface {
	Send(*SubscribeTransactionsRequest) error
	Recv() (*SubscribeTransactionsResponse, error)
	grpc.ClientStream
}

type shredlinkServiceSubscribeTransactionsClient struct {
	grpc.ClientStream
}

func (x *shredlinkServiceSubscribeTransactionsClient) Send(m *SubscribeTransactionsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shredlinkServiceSubscribeTransactionsClient) Recv() (*SubscribeTransactionsResponse, error) {
	m := new(SubscribeTransactionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShredlinkServiceServer is the server API for ShredlinkService service.
// All implementations must embed UnimplementedShredlinkServiceServer
// for forward compatibility
type ShredlinkServiceServer interface {
	SubscribeEntries(*SubscribeEntriesRequest, ShredlinkService_SubscribeEntriesServer) error
	SubscribeTransactions(ShredlinkService_SubscribeTransactionsServer) error
	mustEmbedUnimplementedShredlinkServiceServer()
}

// UnimplementedShredlinkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShredlinkServiceServer struct {
}

func (UnimplementedShredlinkServiceServer) SubscribeEntries(*SubscribeEntriesRequest, ShredlinkService_SubscribeEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEntries not implemented")
}
func (UnimplementedShredlinkServiceServer) SubscribeTransactions(ShredlinkService_SubscribeTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTransactions not implemented")
}
func (UnimplementedShredlinkServiceServer) mustEmbedUnimplementedShredlinkServiceServer() {}

// UnsafeShredlinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShredlinkServiceServer will
// result in compilation errors.
type UnsafeShredlinkServiceServer interface {
	mustEmbedUnimplementedShredlinkServiceServer()
}

func RegisterShredlinkServiceServer(s grpc.ServiceRegistrar, srv ShredlinkServiceServer) {
	s.RegisterService(&ShredlinkService_ServiceDesc, srv)
}

func _ShredlinkService_SubscribeEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeEntriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShredlinkServiceServer).SubscribeEntries(m, &shredlinkServiceSubscribeEntriesServer{stream})
}

type ShredlinkService_SubscribeEntriesServer interface {
	Send(*Entry) error
	grpc.ServerStream
}

type shredlinkServiceSubscribeEntriesServer struct {
	grpc.ServerStream
}

func (x *shredlinkServiceSubscribeEntriesServer) Send(m *Entry) error {
	return x.ServerStream.SendMsg(m)
}

func _ShredlinkService_SubscribeTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShredlinkServiceServer).SubscribeTransactions(&shredlinkServiceSubscribeTransactionsServer{stream})
}

type ShredlinkService_SubscribeTransactionsServer interface {
	Send(*SubscribeTransactionsResponse) error
	Recv() (*SubscribeTransactionsRequest, error)
	grpc.ServerStream
}

type shredlinkServiceSubscribeTransactionsServer struct {
	grpc.ServerStream
}

func (x *shredlinkServiceSubscribeTransactionsServer) Send(m *SubscribeTransactionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shredlinkServiceSubscribeTransactionsServer) Recv() (*SubscribeTransactionsRequest, error) {
	m := new(SubscribeTransactionsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShredlinkService_ServiceDesc is the grpc.ServiceDesc for ShredlinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShredlinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shredlink.ShredlinkService",
	HandlerType: (*ShredlinkServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeEntries",
			Handler:       _ShredlinkService_SubscribeEntries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTransactions",
			Handler:       _ShredlinkService_SubscribeTransactions_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "shredlink.proto",
}
